openapi: 3.1.0
info:
  title: Semantic Cuisine
  description: |-
    This is the API specification for the Semantic Browse for Cuisines application.
  version: 1.0.2
externalDocs:
  description: Refer to the requirements
  url: https://github.com/bounswe/bounswe2024group1/wiki/Requirements
servers:
  - url: http://localhost:5173/api/v1
    description: Development compose
  - url: http://localhost:80/api/v1
    description: Production-like compose
  - url: https://semantic-cuisine-wh4f2.ondigitalocean.app/api/v1
    description: Production
  - url: https://semantic-cuisine-staging-t3m52.ondigitalocean.app/api/v1
    description: Staging
tags:
  - name: auth
    description: Operations about authentication
  - name: dish
    description: Operations about dishes
  - name: cuisines
    description: Operations about cuisines
  - name: user
    description: Operations about user
  - name: recipe
    description: Operations about recipes
paths:
  /users/logout:
    post:
      tags:
        - auth
      summary: User logout
      security:
        - auth_jwt: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: object

  /users/verify-email:
    post:
      tags:
        - auth
      summary: Verify user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
              properties:
                token:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: object
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /users/resend-verification-email:
    post:
      tags:
        - auth
      summary: Resend verification email
      security:
        - auth_jwt: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: object
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /users/reset-password-request:
    post:
      tags:
        - auth
      summary: Request password reset
      description:
        A password reset link will be sent to the user's email if it exists.
        The response must always be success (even if email does not exist).
        This is to prevent email enumeration attacks.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: object
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /users/reset-password:
    post:
      tags:
        - auth
      summary: Reset password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - newPassword
              properties:
                token:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: object
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /users/signup:
    post:
      tags:
        - auth
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegistration"
      responses:
        "201":
          $ref: "#/components/responses/CreatedResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /users/login:
    post:
      tags:
        - auth
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/AuthToken"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"

  /users/{userId}:
    get:
      tags:
        - user
      summary: Get user profile
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

    put:
      tags:
        - user
      summary: Update user profile
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/UserProfile"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /users/{userId}/following:
    get:
      tags:
        - user
      summary: Get users being followed
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserSummary"

  /users/{userId}/followers:
    get:
      tags:
        - user
      summary: Get user's followers
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserSummary"

  /users/follow:
    post:
      tags:
        - user
      summary: Follow a user
      security:
        - auth_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followingUserId:
                  type: integer
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /users/unfollow:
    post:
      tags:
        - user
      summary: Unfollow a user
      security:
        - auth_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                followingUserId:
                  type: integer
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /search/users:
    get:
      tags:
        - user
      summary: Search for users
      parameters:
        - in: query
          name: q
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/UserSummary"

  /search/dishes:
    get:
      tags:
        - dish
      summary: Search for dishes
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: cuisine
          schema:
            type: string
            description: Comma separated list of cuisines
        - in: query
          name: foodType
          schema:
            type: string
            description: Comma separated list of food types
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/DishSearchResult"

  /dishes/{dishId}:
    get:
      tags:
        - dish
      summary: Get dish details
      parameters:
        - in: path
          name: dishId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/DishDetails"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /cuisines/{cuisineId}:
    get:
      tags:
        - cuisines
      summary: Get cuisine details
      parameters:
        - in: path
          name: cuisineId
          required: true
          schema:
            type: integer
        - in: query
          name: includeDishes
          schema:
            type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/CuisineDetails"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /recipes:
    get:
      tags:
        - recipe
      summary: Get recipes for dish, cuisine
      parameters:
        - in: query
          name: sort
          schema:
            type: string
            enum: [recent, topRated]
        - in: query
          name: dishId
          schema:
            type: integer
        - in: query
          name: cuisineId
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/RecipeSummary"

    post:
      tags:
        - recipe
      summary: Create a new recipe
      security:
        - auth_jwt: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewRecipe"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/CreatedResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RecipeDetails"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /recipes/{recipeId}:
    get:
      tags:
        - recipe
      summary: Get recipe details
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/RecipeDetails"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

    delete:
      tags:
        - recipe
      summary: Delete a recipe
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: No content
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"

  /recipes/{recipeId}/rating:
    post:
      tags:
        - recipe
      summary: Rate a recipe
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /recipes/{recipeId}/bookmark:
    post:
      tags:
        - recipe
      summary: Bookmark a recipe
      security:
        - auth_jwt: []
      parameters:
        - in: path
          name: recipeId
          required: true
          schema:
            type: integer
      responses:
        "200":
          $ref: "#/components/responses/OkResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

  /feed:
    get:
      tags:
        - user
      summary: Get user's feed
      security:
        - auth_jwt: []
      parameters:
        - in: query
          name: type
          required: true
          schema:
            type: string
            enum: [explore, following]
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/responses/OkResponse/content/application%2Fjson/schema"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/RecipeSummary"
        "400":
          $ref: "#/components/responses/BadRequestResponse"

components:
  schemas:
    UserRegistration:
      type: object
      required:
        - username
        - email
        - password
        - firstName
        - lastName
        - country
      properties:
        email:
          type: string
        username:
          type: string
        password:
          type: string
        bio:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string

    UserLogin:
      type: object
      required:
        - usernameOrEmail
        - password
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string

    AuthToken:
      type: object
      properties:
        token:
          type: string

    UserProfile:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        bio:
          type: string
        followersCount:
          type: integer
        gender:
          type: string
          enum: [male, female, unknown]
        profilePicture:
          type: string
          format: uri
        diets:
          type: array
          items:
            type: string
        recipeCount:
          type: integer
        bookmarks:
          type: array
          description: Only available when querying own profile.
          items:
            $ref: "#/components/schemas/RecipeSummary"
        recipes:
          type: array
          items:
            $ref: "#/components/schemas/RecipeSummary"
      examples:
        - id: 1
          username: "takoyaki_lover"
          name: "Takoyaki Lover"
          bio: "I love takoyaki!"
          followersCount: 100
          gender: unknown
          profilePicture: "https://images.unsplash.com/photo-1633790450512-98e68a55ef15?ixlib=rb-4.0.3&q=85&fm=jpg&crop=entropy&cs=srgb&dl=brunno-tozzo-GAIC2WHxm5A-unsplash.jpg&w=640"
          diets: ["keto"]
          recipeCount: 10
          bookmarks:
            - id: 1
              name: "My Takoyaki Recipe"
              description: "A delicious takoyaki recipe that I learned from my grandmother."
              cookTime: 30
              images:
                - "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
              rating: 4.5
              dish:
                id: "http://www.wikidata.org/entity/Q905527"
                name: "takoyaki"
          recipes:
            - id: 1
              name: "My Takoyaki Recipe"
              description: "A delicious takoyaki recipe that I learned from my grandmother."
              cookTime: 30
              images:
                - "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
              rating: 4.5
              dish:
                id: "http://www.wikidata.org/entity/Q905527"
                name: "takoyaki"
    UserSummary:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        name:
          type: string
        followersCount:
          type: integer
        profilePicture:
          type: string
          format: uri
        recipeCount:
          type: integer
        avgRating:
          type: number
          format: float
      examples:
        - id: 1
          username: "takoyaki_lover"
          name: "Takoyaki Lover"
          followersCount: 100
          profilePicture: "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          recipeCount: 10
          avgRating: 4.5

    DishSearchResult:
      type: object
      $ref: "#/components/schemas/DishDetails"
      examples:
        - id: "http://www.wikidata.org/entity/Q905527"
          name: "takoyaki"
          description: "ball-shaped Japanese snack with octopus"
          image: "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          countries: "Japan"
          ingredients: "wheat flour, green laver, octopus as food, beni shōga, katsuobushi, Welsh onion"
          foodTypes: "konamono, octopus dish, yakimono"
          cuisines: "Japanese cuisine"

    DishDetails:
      type: object
      required:
        - id
        - name
        - image
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        countries:
          type: string
        ingredients:
          type: string
        foodTypes:
          type: string
        cuisine:
          $ref: "#/components/schemas/CuisineSummary"
        recipes:
          type: array
          description: Only returned when directly querying a dish.
          items:
            $ref: "#/components/schemas/RecipeSummary"

    CuisineDetails:
      type: object
      required:
        - id
        - name
        - description
        - image
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        image:
          type: string
          format: uri
        dishes:
          type: array
          items:
            $ref: "#/components/schemas/DishSummary"

    RecipeSummary:
      type: object
      required:
        - id
        - name
        - description
        - images
        - rating
        - author
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        cookTime:
          type: integer
          description: Cook time in minutes
        images:
          type: array
          items:
            type: string
            format: uri
        rating:
          type: number
          format: float
        dish:
          $ref: "#/components/schemas/DishSummary"
        author:
          $ref: "#/components/schemas/UserSummary"
      examples:
        - id: 1
          name: "My Takoyaki Recipe"
          description: "A delicious takoyaki recipe that I learned from my grandmother."
          cookTime: "30 minutes"
          images:
            - "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          rating: 4.5
          dish:
            id: "http://www.wikidata.org/entity/Q905527"
            name: "takoyaki"
            image: "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          author:
            id: 1
            username: "takoyaki_lover"
            name: "Takoyaki Lover"
            followersCount: 100
            profilePicture: "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
            recipeCount: 10
            avgRating: 4.5

    RecipeDetails:
      type: object
      required:
        - id
        - name
        - description
        - instructions
        - ingredients
        - images
        - cookTime
        - servingSize
        - allergens
        - ratingsCount
        - author
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        instructions:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
            format: uri
        cookTime:
          type: string
        servingSize:
          type: integer
        allergens:
          type: array
          items:
            type: string
        cuisine:
          $ref: "#/components/schemas/CuisineSummary"
        dish:
          $ref: "#/components/schemas/DishSummary"
        avgRating:
          type: number
          format: float
        ratingsCount:
          type: integer
        author:
          $ref: "#/components/schemas/UserSummary"
      examples:
        - id: 1
          name: "My Takoyaki Recipe"
          description: "A delicious takoyaki recipe that I learned from my grandmother."
          instructions:
            - "Mix the batter."
            - "Add the octopus."
            - "Cook the takoyaki balls."
          ingredients:
            - "wheat flour"
            - "green laver"
            - "octopus as food"
            - "beni shōga"
            - "katsuobushi"
            - "Welsh onion"
          images:
            - "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          cookTime: "30 minutes"
          servingSize: 4
          allergens:
            - "seafood"
          cuisine:
            id: 1
            name: "Japanese"
          dish:
            id: "http://www.wikidata.org/entity/Q905527"
            name: "takoyaki"
            image: "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          avgRating: 4.5
          ratingsCount: 10

    NewRecipe:
      type: object
      required:
        - name
        - instructions
        - ingredients
        - prepTime
        - cookTime
        - servingSize
      properties:
        name:
          type: string
        description:
          type: string
        instructions:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
            format: binary
        prepTime:
          type: string
        cookTime:
          type: string
        servingSize:
          type: integer
        allergens:
          type: array
          items:
            type: string
        dishId:
          type: integer
      examples:
        - name: "My Takoyaki Recipe"
          description: "A delicious takoyaki recipe that I learned from my grandmother."
          instructions:
            - "Mix the batter."
            - "Add the octopus."
            - "Cook the takoyaki balls."
          ingredients:
            - "wheat flour"
            - "green laver"
            - "octopus as food"
            - "beni shōga"
            - "katsuobushi"
            - "Welsh onion"
          images:
            - "http://commons.wikimedia.org/wiki/Special:FilePath/Takoyaki%20by%20yomi955.jpg"
          prepTime: "10 minutes"
          cookTime: "30 minutes"
          servingSize: 4
          allergens:
            - "seafood"
          dishId: 1

    CuisineSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      examples:
        - id: 1
          name: "Japanese"

    DishSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      examples:
        - id: 1
          name: "takoyaki"

    ApiResponse:
      type: object
      required:
        - status
      properties:
        status:
          type: integer
          description: <300 indicates success, >=400 indicates error.
        data:
          type: object
        errors:
          type: array
          items:
            $ref: "#/components/schemas/ApiError"
      examples:
        - status: 200
          data: { "message": "Success" }
        - status: 400
          errors:
            - message: "Invalid email"
              field: "email"
            - message: "Invalid password"
              field: "password"

    ApiError:
      type: object
      required:
        - message
      properties:
        message:
          type: string
        field:
          type: string
          description: If empty, indicates an error not related to any field.
  responses:
    OkResponse:
      description: OK
      content:
        application/json:
          schema:
            type: object
            required: ["status"]
            properties:
              status:
                type: integer
                examples: [200]
              data:
                type: object

    CreatedResponse:
      description: Created
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples: [201]
              data:
                type: object

    BadRequestResponse:
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples: [400]
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

    UnauthorizedResponse:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples:
                  - 401
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples:
                  - 403
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

    NotFoundResponse:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples:
                  - 404
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

    ConflictResponse:
      description: Conflict
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples:
                  - 409
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: integer
                examples:
                  - 500
              errors:
                type: array
                items:
                  $ref: "#/components/schemas/ApiError"

  securitySchemes:
    auth_jwt:
      type: http
      description: A bearer token is used to authenticate a user.
      scheme: bearer
      bearerFormat: JWT
