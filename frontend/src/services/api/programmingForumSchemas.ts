/**
 * Generated by @openapi-codegen
 *
 * @version 1.0.0
 */
export type UserRegistration = {
  username: string;
  /**
   * @format email
   */
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  country: string;
};

export type UserLogin = {
  usernameOrEmail: string;
  password: string;
};

export type AuthToken = {
  token?: string;
};

export type UserProfile = {
  id?: number;
  username?: string;
  email?: string;
  firstName?: string;
  lastName?: string;
  bio?: string;
  country?: string;
  reputationPoints?: number;
  followersCount?: number;
  followingCount?: number;
  selfFollowing?: boolean;
  questionCount?: number;
  answerCount?: number;
};

export type UserProfileUpdate = {
  bio?: string;
  country?: string;
};

export type UserSummary = {
  id: number;
  username: string;
  reputationPoints: number;
  /**
   * @format url
   */
  profilePicture: string;
  name: string;
};

export type NewQuestion = {
  title: string;
  content: string;
  tags: string[];
};

export type UpdateQuestion = {
  title?: string;
  content?: string;
  tags?: string[];
};

export type QuestionDetails = {
  id: number;
  title: string;
  content: string;
  author: UserSummary;
  /**
   * @format date-time
   */
  createdAt: string;
  /**
   * @format date-time
   */
  updatedAt: string;
  tags: TagSummary[];
  rating: number;
  answerCount: number;
  viewCount?: number;
  bookmarked?: boolean;
};

export type QuestionSummary = {
  id?: number;
  title?: string;
  author?: UserSummary;
  /**
   * @format date-time
   */
  createdAt?: string;
  tags?: TagSummary[];
  rating?: number;
  answerCount?: number;
  viewCount?: number;
};

export type NewAnswer = {
  content: string;
};

export type UpdateAnswer = {
  content?: string;
};

export type AnswerDetails = {
  id?: number;
  content?: string;
  author?: UserSummary;
  /**
   * @format date-time
   */
  createdAt?: string;
  /**
   * @format date-time
   */
  updatedAt?: string;
  rating?: number;
};

export type TagDetails = {
  id?: string;
  name?: string;
  description?: string;
  questionCount?: number;
  followersCount?: number;
  following?: boolean;
};

export type TagSummary = {
  id?: string;
  name?: string;
};

export type Profile = {
  id?: number;
  username?: string;
  bio?: string;
  reputationPoints?: number;
  followersCount?: number;
  followingCount?: number;
  selfFollowing?: boolean;
  questionCount?: number;
  answerCount?: number;
  tags?: TagSummary[];
};

export type UpdateProfile = {
  bio?: string;
  tags?: string[];
};

export type CodeExecution = {
  /**
   * The code snippet to be executed
   */
  code: string;
  /**
   * The programming language of the code snippet
   */
  language: "c" | "csharp" | "cpp" | "go" | "java" | "javascript" | "python3";
  /**
   * Optional input for the code execution
   */
  input?: string;
};

export type ExecutionResult = {
  /**
   * The standard output of the code execution
   */
  output?: string;
  /**
   * Any error messages or standard error output
   */
  errors?: string;
  /**
   * The time taken to execute the code in milliseconds
   */
  executionTime?: number;
  /**
   * The status of the code execution
   */
  status?: "success" | "error" | "timeout";
};

/**
 * Error
 */
export type Error = {
  errorMessage?: string;
  stackTrace?: string;
};

/**
 * OK
 */
export type SuccessResponseObject = {
  /**
   * Internal status code of the response. An HTTP 200 response with an internal 500 status code is an error response. Prioritize the inner status over the HTTP status.
   *
   * @example 200
   * @example 201
   */
  status: 200 | 201;
  data: Record<string, any> | any[];
};

/**
 * Response with errors
 */
export type ErrorResponseObject = {
  /**
   * Internal status code of the response. An HTTP 200 response with an internal 500 status code is an error response. Prioritize the inner status over the HTTP status.
   *
   * @example 400
   * @example 401
   * @example 403
   * @example 404
   * @example 409
   * @example 500
   */
  status: 400 | 401 | 403 | 404 | 409 | 500;
  error?: Error;
};
